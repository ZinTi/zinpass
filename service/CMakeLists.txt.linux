cmake_minimum_required(VERSION 3.20)

# 检查是否从顶级项目继承版本号，否则设置默认值
if(NOT DEFINED ZINPASS_VERSION)
    set(ZINPASS_VERSION 0.0.1)  # 独立构建时的默认值
endif()
project(zinpass_service VERSION ${ZINPASS_VERSION} LANGUAGES CXX)

# 设置输出目录
set(COMPONENT_NAME "server")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${PROGRAM_NAME}-${COMPONENT_NAME}-v${ZINPASS_VERSION}-${OS_NAME}-${ARCH_NAME}-${TOOLCHAIN_NAME}/bin)

# 设置平台相关变量
if(WIN32)
    set(EXECUTABLE_NAME "zinpasssvc")    # Windows 下生成 zinpasssvc.exe
elseif(CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(EXECUTABLE_NAME "zinpassd")      # Linux 下生成 zinpassd
else()
    set(EXECUTABLE_NAME "zinpassd") # 其他平台
endif()

# 设置依赖库搜索路径（完整路径、环境变量或缓存变量）
#list(APPEND CMAKE_PREFIX_PATH
#        "A:/applib/grpc-1.71.0-amd64-win-mingw64"    # gRPC-1.71.0
#        "A:/applib/openssl-win64-mingw"              # OpenSSL-3.5.0 (若 gRPC 库中内置的 OpenSSL冲突了，则注释掉此行)
#        "A:/applib/boost-msys2-mingw64"              # Boost-1.88
#        "A:/applib/sqlite-v3.50.0-windows-amd64"     # SQLite-3.50.0 (libsqlite3.a)
#)

# 查找依赖包
find_package(OpenSSL REQUIRED)
find_package(Protobuf REQUIRED)
find_package(gRPC REQUIRED)
find_package(Boost REQUIRED)
find_package(SQLite3 REQUIRED)

# 设置 C++ 标准
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 指定Boost头文件库路径
# set(BOOST_HEADER_ONLY_DIR "A:/applib/boost-msys2-mingw64/include/boost-1_88")

# 设置变量，包含项目文件
set(PROJECT_SOURCES
        # 0. 后台服务/守护进程程序主函数
        src/main.cpp

        # 1. 通用工具-utils
        src/utils/date_time.cpp
        src/utils/pwd_utils.cpp
        src/utils/pwd_generator.cpp
        src/utils/uuid_generator.cpp
        src/utils/log_manager.cpp           # 日志

        # 2. 服务配置-config
        src/config/about.cpp
        src/config/read_config_file.cpp
        src/config/state_manager.cpp

        # 3. 业务逻辑层-mgr
        src/mgr/user_mgr.cpp
        src/mod_session/session_persistence.cpp
        src/mod_session/session_mgr.cpp
        src/mgr/telecom_operator_mgr.cpp
        src/mgr/phone_mgr.cpp
        src/mgr/account_mgr.cpp
        src/mgr/authentication.cpp

        # 4. 数据访问层-repo
        src/repo/connection_pool.cpp
        src/repo/common/sql_debug.cpp
        src/repo/init_database.cpp # 初始化 Database
        src/repo/user_dao.cpp
        src/mod_session/session_dao.cpp
        src/repo/telecom_operator_dao.cpp
        src/repo/phone_dao.cpp
        src/repo/category_dao.cpp
        src/repo/account_dao.cpp

        # 5. 领域模型（与proto解耦）-models
        src/models/system_user.cpp
        src/mod_session/session.cpp
        src/models/mobile_phone.cpp
        src/models/account.cpp
        src/models/view_account.cpp

        # 6. gRPC 服务实现层-rpc
        src/rpc/grpc_client_service.cpp
        src/rpc/grpc_control_service.cpp
        src/rpc/hello_service.cpp       # 测试 RPC 是否连通
        src/rpc/user/user_service.cpp
        src/rpc/user/auth_service.cpp
        src/rpc/phone/telecom_service.cpp
        src/rpc/phone/phone_service.cpp
        src/rpc/account/account_service.cpp
        src/rpc/account/category_service.cpp
        src/rpc/status/status_service.cpp

        # auto_generated
        auto_generated/common/v1/common.pb.cc
        auto_generated/common/v1/common.grpc.pb.cc
        auto_generated/hello/hello.pb.cc
        auto_generated/hello/hello.grpc.pb.cc
        auto_generated/control/status.pb.cc
        auto_generated/control/status.grpc.pb.cc

        auto_generated/user/v1/user.pb.cc
        auto_generated/user/v1/user.grpc.pb.cc
        auto_generated/user/v1/auth.pb.cc
        auto_generated/user/v1/auth.grpc.pb.cc
        auto_generated/account/v1/telecom.pb.cc
        auto_generated/account/v1/telecom.grpc.pb.cc
        auto_generated/account/v1/phone.pb.cc
        auto_generated/account/v1/phone.grpc.pb.cc
        auto_generated/account/v1/account.pb.cc
        auto_generated/account/v1/account.grpc.pb.cc
        auto_generated/account/v1/category.pb.cc
        auto_generated/account/v1/category.grpc.pb.cc
)

# 添加可执行文件
add_executable(zinpass_service
        ${PROJECT_SOURCES}
)

# 设置输出文件名
set_target_properties(zinpass_service PROPERTIES
        OUTPUT_NAME "${EXECUTABLE_NAME}"
        LINK_FLAGS "-Wl,-s"
)

# 包含头文件目录（在add_executable、add_library之后）
target_include_directories(zinpass_service
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/inc/
        ${CMAKE_CURRENT_SOURCE_DIR}/auto_generated/

        ${OPENSSL_INCLUDE_DIR} # OpenSSL 头文件
        ${BOOST_HEADER_ONLY_DIR}  # Boost 头文件
)

# 仅Windows平台设置无控制台
if(WIN32)
    # 判断编译器类型
    if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
        target_link_options(${PROJECT_NAME} PRIVATE "-Wl,-subsystem,windows") # MinGW-w64/GCC/Clang使用 -Wl,-subsystem,windows
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
        target_link_options(${PROJECT_NAME} PRIVATE "/SUBSYSTEM:WINDOWS") # MSVC使用 /SUBSYSTEM:WINDOWS
    endif()
endif()

# 链接库
target_link_libraries(zinpass_service
    PRIVATE
        SQLite::SQLite3

        gRPC::grpc++
        gRPC::grpc
        gRPC::gpr
        protobuf::libprotobuf
)
